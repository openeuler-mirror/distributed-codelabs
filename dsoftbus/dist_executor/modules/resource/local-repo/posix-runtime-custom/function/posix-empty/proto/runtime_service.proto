/*
 * Copyright (c) 2022 Huawei Technologies Co., Ltd
 *
 * This software is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *
 * http://license.coscl.org.cn/MulanPSL2
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package runtime_service;

import "common.proto";

option go_package = "grpc/pb/runtime;runtime";

// Runtime service provides APIs to core,
service RuntimeService {
  // Call a method or init state of instance
  rpc Call (CallRequest) returns (CallResponse) {}
  // NotifyResult is applied to async notify result of create or invoke request invoked by runtime
  rpc NotifyResult (NotifyRequest) returns (NotifyResponse) {}
  // Checkpoint request a state to save for failure recovery and state migration
  rpc Checkpoint (CheckpointRequest) returns (CheckpointResponse) {}
  // Recover state
  rpc Recover (RecoverRequest) returns (RecoverResponse) {}
  // GracefulExit request an instance graceful exit
  rpc GracefulExit (GracefulExitRequest) returns (GracefulExitResponse) {}
  // Shutdown request an instance shutdown
  rpc Shutdown (ShutdownRequest) returns (ShutdownResponse) {}
  // check whether the runtime is alive
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse) {}
  // Signal the signal to instance
  rpc Signal (SignalRequest) returns (SignalResponse) {}
}

message CallRequest {
  string              function             = 1;
  repeated common.Arg args                 = 2;
  string              traceID              = 3;
  string              returnObjectID       = 4;
  // isCreate specify the request whether initialization or runtime invoke
  bool                isCreate             = 5;
  // senderID specify the caller identity
  // while process done, it should be send back to core by CallResult.instanceID
  string              senderID             = 6;
  // while process done, it should be send back to core by CallResult.requestID
  string              requestID            = 7;
  repeated string     returnObjectIDs      = 8;
  map<string, string> createOptions        = 9;
  HttpTriggerEvent    triggerRequest       = 10;
}

message CallResponse {
  common.ErrorCode code    = 1;
  string           message = 2;

}

message CheckpointRequest {
  string checkpointID = 1;
}

message CheckpointResponse {
  common.ErrorCode code    = 1;
  string           message = 2;
  bytes            state   = 3;
}

message RecoverRequest {
  bytes state = 1;
  map<string, string> createOptions  = 2;
}

message RecoverResponse {
  common.ErrorCode code    = 1;
  string           message = 2;
}

message GracefulExitRequest {
  uint64 gracePeriodSecond = 1;
}

message GracefulExitResponse {
  common.ErrorCode code    = 1;
  string           message = 2;
}

message ShutdownRequest {
  uint64 gracePeriodSecond = 1;
}

message ShutdownResponse {
  common.ErrorCode code    = 1;
  string           message = 2;
}

message NotifyRequest {
  string           requestID = 1;
  common.ErrorCode code      = 2;
  string           message   = 3;
}

message NotifyResponse {}

message HeartbeatRequest {}

message HeartbeatResponse {}

message SignalRequest {
  int32 signal  = 1;
  bytes payload = 2;
}

message SignalResponse {
  common.ErrorCode code    = 1;
  string           message = 2;
}

message HttpTriggerEvent {
  string              path                      = 1;
  string              queryStringParameters     = 2;
  string              httpMethod                = 3;
  bytes               body                      = 4;
  map<string, string> headers                   = 5;
}