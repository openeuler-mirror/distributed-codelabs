/*
 * Copyright (c) 2022 Huawei Technologies Co., Ltd
 *
 * This software is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *
 * http://license.coscl.org.cn/MulanPSL2
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package runtime_rpc;

import "core_service.proto";
import "runtime_service.proto";

option go_package = "grpc/pb;api";

// RuntimeRPC provide bidirectional streaming RPC interface
service RuntimeRPC {
  // build bidirection grpc communication channel, different message body type specify different api handler
  rpc MessageStream (stream StreamingMessage) returns (stream StreamingMessage) {}
}

message StreamingMessage {
  string messageID = 1;
  oneof body {

    // Create an instance for specify function
    // handle by core
    core_service.CreateRequest         createReq     = 2;
    core_service.CreateResponse        createRsp     = 3;

    // invoke the created instance
    // handle by core
    core_service.InvokeRequest         invokeReq     = 4;
    core_service.InvokeResponse        invokeRsp     = 5;

    // exit the created instance
    // only support to be called by instance itself
    // handle by core
    core_service.ExitRequest           exitReq       = 6;
    core_service.ExitResponse          exitRsp       = 7;

    // save state of the created instance
    // handle by core
    core_service.StateSaveRequest      saveReq       = 8;
    core_service.StateSaveResponse     saveRsp       = 9;

    // load state of the created instance
    // handle by core
    core_service.StateLoadRequest      loadReq       = 10;
    core_service.StateLoadResponse     loadRsp       = 11;

    // send the signal to instance or core
    // 1 ~ 63: core defined signal
    // 64 ~ 1024: custom runtime defined signal
    // handle by core
    core_service.KillRequest           killReq       = 12;
    core_service.KillResponse          killRsp       = 13;

    // send call request result to sender
    // handle by core
    core_service.CallResult            callResultReq = 14;
    core_service.CallResultAck         callResultAck = 15;

    // Call a method or init state of instance
    // handle by runtime
    runtime_service.CallRequest        callReq       = 16;
    runtime_service.CallResponse       callRsp       = 17;

    // NotifyResult is applied to async notify result of create or invoke request invoked by runtime
    // handle by runtime
    runtime_service.NotifyRequest      notifyReq     = 18;
    runtime_service.NotifyResponse     notifyRsp     = 19;

    // Checkpoint request a state to save for failure recovery and state migration
    // handle by runtime
    runtime_service.CheckpointRequest  checkpointReq = 20;
    runtime_service.CheckpointResponse checkpointRsp = 21;

    // Recover state
    // handle by runtime
    runtime_service.RecoverRequest     recoverReq    = 22;
    runtime_service.RecoverResponse    recoverRsp    = 23;

    // request an instance to shutdown
    // handle by runtime
    runtime_service.ShutdownRequest    shutdownReq   = 24;
    runtime_service.ShutdownResponse   shutdownRsp   = 25;

    // receive the signal send by other runtime or driver
    // handle by runtime
    runtime_service.SignalRequest      signalReq     = 26;
    runtime_service.SignalResponse     signalRsp     = 27;

    // check whether the runtime is alive
    // handle by runtime
    runtime_service.HeartbeatRequest   heartbeatReq  = 28;
    runtime_service.HeartbeatResponse  heartbeatRsp  = 29;
  }

  // message is sent from functiontask(0), or frontend, this is only used in runtime call request for now
  int32 messageFrom = 30;
}