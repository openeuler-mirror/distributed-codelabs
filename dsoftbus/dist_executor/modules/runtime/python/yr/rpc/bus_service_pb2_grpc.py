# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from yr.rpc import bus_service_pb2 as rpc_dot_bus__service__pb2


class BusServiceStub(object):
    """bus service provides APIs to runtime,
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DiscoverFrontend = channel.unary_unary(
                '/bus_service.BusService/DiscoverFrontend',
                request_serializer=rpc_dot_bus__service__pb2.DiscoverFrontendRequest.SerializeToString,
                response_deserializer=rpc_dot_bus__service__pb2.DiscoverFrontendResponse.FromString,
                )
        self.QueryInstance = channel.unary_unary(
                '/bus_service.BusService/QueryInstance',
                request_serializer=rpc_dot_bus__service__pb2.QueryInstanceRequest.SerializeToString,
                response_deserializer=rpc_dot_bus__service__pb2.QueryInstanceResponse.FromString,
                )
        self.DiscoverDriver = channel.unary_unary(
                '/bus_service.BusService/DiscoverDriver',
                request_serializer=rpc_dot_bus__service__pb2.DiscoverDriverRequest.SerializeToString,
                response_deserializer=rpc_dot_bus__service__pb2.DiscoverDriverResponse.FromString,
                )


class BusServiceServicer(object):
    """bus service provides APIs to runtime,
    """

    def DiscoverFrontend(self, request, context):
        """notify bus to connect frontend
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryInstance(self, request, context):
        """query instance info from frontend
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverDriver(self, request, context):
        """notify bus to connect driver
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DiscoverFrontend': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverFrontend,
                    request_deserializer=rpc_dot_bus__service__pb2.DiscoverFrontendRequest.FromString,
                    response_serializer=rpc_dot_bus__service__pb2.DiscoverFrontendResponse.SerializeToString,
            ),
            'QueryInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryInstance,
                    request_deserializer=rpc_dot_bus__service__pb2.QueryInstanceRequest.FromString,
                    response_serializer=rpc_dot_bus__service__pb2.QueryInstanceResponse.SerializeToString,
            ),
            'DiscoverDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverDriver,
                    request_deserializer=rpc_dot_bus__service__pb2.DiscoverDriverRequest.FromString,
                    response_serializer=rpc_dot_bus__service__pb2.DiscoverDriverResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bus_service.BusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BusService(object):
    """bus service provides APIs to runtime,
    """

    @staticmethod
    def DiscoverFrontend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bus_service.BusService/DiscoverFrontend',
            rpc_dot_bus__service__pb2.DiscoverFrontendRequest.SerializeToString,
            rpc_dot_bus__service__pb2.DiscoverFrontendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bus_service.BusService/QueryInstance',
            rpc_dot_bus__service__pb2.QueryInstanceRequest.SerializeToString,
            rpc_dot_bus__service__pb2.QueryInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bus_service.BusService/DiscoverDriver',
            rpc_dot_bus__service__pb2.DiscoverDriverRequest.SerializeToString,
            rpc_dot_bus__service__pb2.DiscoverDriverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
