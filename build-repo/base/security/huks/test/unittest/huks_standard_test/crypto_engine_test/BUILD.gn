# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/huks/huks.gni")
import("//build/ohos.gni")
import("//build/test.gni")

module_output_path = "huks_standard/hal_unittest"

config("json_config") {
  cflags_cc = [ "-fexceptions" ]
}

ohos_unittest("crypto_engine_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "//base/security/huks/frameworks/huks_standard/main/common/include",
    "//base/security/huks/interfaces/innerkits/huks_standard/main/include",
  ]

  sources = [
    "./src/hks_crypto_hal_aes_cipher.cpp",
    "./src/hks_crypto_hal_aes_decrypt.cpp",
    "./src/hks_crypto_hal_aes_encrypt.cpp",
    "./src/hks_crypto_hal_aes_key.cpp",
    "./src/hks_crypto_hal_common.cpp",
    "./src/hks_crypto_hal_common.h",
    "./src/hks_crypto_hal_dh.cpp",
    "./src/hks_crypto_hal_dh_agree.cpp",
    "./src/hks_crypto_hal_dsa_key.cpp",
    "./src/hks_crypto_hal_dsa_sign.cpp",
    "./src/hks_crypto_hal_ecc_key.cpp",
    "./src/hks_crypto_hal_ecdh_agree.cpp",
    "./src/hks_crypto_hal_ecdsa_sign.cpp",
    "./src/hks_crypto_hal_hmac_hmac.cpp",
    "./src/hks_crypto_hal_hmac_key.cpp",
    "./src/hks_crypto_hal_rsa_cipher.cpp",
    "./src/hks_crypto_hal_rsa_decrypt.cpp",
    "./src/hks_crypto_hal_rsa_encrypt.cpp",
    "./src/hks_crypto_hal_rsa_key.cpp",
    "./src/hks_crypto_hal_rsa_oaep_decrypt.cpp",
    "./src/hks_crypto_hal_rsa_oaep_encrypt.cpp",
    "./src/hks_crypto_hal_rsa_sign.cpp",
  ]
  if (use_crypto_lib == "openssl") {
    sources += [ "./src/hks_crypto_hal_api_openssl.cpp" ]
  }
  if (use_crypto_lib == "mbedtls") {
    sources += [ "./src/hks_crypto_hal_api_mbedtls.cpp" ]
  }

  defines = [ "_HUKS_LOG_ENABLE_" ]

  if (use_crypto_lib == "openssl") {
    defines += [ "_USE_OPENSSL_" ]
  }
  if (use_crypto_lib == "mbedtls") {
    defines += [ "_USE_MBEDTLS_" ]
  }

  configs = [
    "//commonlibrary/c_utils/base:utils_config",
    "//base/security/huks/frameworks/config/build:coverage_flag",
  ]

  deps = [
    "//base/security/huks/frameworks/huks_standard/main/os_dependency:libhuks_os_dependency_standard_static",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
  ]

  cflags = [
    "-Wall",
    "-Werror",
  ]

  if (use_crypto_lib == "openssl") {
    deps += [ "//base/security/huks/frameworks/huks_standard/main/crypto_engine/openssl:libhuks_openssl_standard_static" ]
  }
  if (use_crypto_lib == "mbedtls") {
    deps += [ "//base/security/huks/frameworks/huks_standard/main/crypto_engine/mbedtls:libhuks_mbedtls_standard_static" ]
  }

  subsystem_name = "security"
  part_name = "huks"
}
