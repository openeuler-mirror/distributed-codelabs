# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/communication/dsoftbus/dsoftbus.gni")
import(
    "//foundation/communication/dsoftbus/tests/core/transmission/common/mock/mock.gni")

module_output_path = "dsoftbus/transmission"

ohos_unittest("TransProxyChannelCoreTest") {
  module_out_path = module_output_path
  sources = [ "trans_proxy_channel_test.cpp" ]

  include_dirs = [
    "$softbus_adapter_common/include",

    "$dsoftbus_root_path/core/adapter/bus_center/include",
    "$dsoftbus_root_path/core/authentication/include",
    "$dsoftbus_root_path/core/authentication/interface",

    "$dsoftbus_root_path/core/bus_center/interface",
    "$dsoftbus_root_path/core/bus_center/lnn/net_ledger/common/include",
    "$dsoftbus_root_path/core/bus_center/lnn/net_ledger/distributed_ledger/include",
    "$dsoftbus_root_path/core/bus_center/lnn/net_ledger/local_ledger/include",
    "$dsoftbus_root_path/core/bus_center/lnn/net_ledger/sync_ledger/include",
    "$dsoftbus_root_path/core/bus_center/lnn/net_builder/include",
    "$dsoftbus_root_path/core/bus_center/lnn/net_buscenter/include",
    "$dsoftbus_root_path/core/bus_center/lnn/lane_hub/lane_manager/include",

    "$dsoftbus_root_path/core/common/include",
    "$dsoftbus_root_path/core/common/message_handler/include",

    "$dsoftbus_root_path/core/connection/interface",

    "$dsoftbus_root_path/core/discovery/interface",
    "$dsoftbus_root_path/core/discovery/manager/include",
    "$dsoftbus_root_path/core/discovery/coap/include",

    "$dsoftbus_root_path/core/transmission/common/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/common/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/tcp_direct/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/proxy/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/proxy/src",
    "$dsoftbus_root_path/core/transmission/interface",
    "$dsoftbus_root_path/core/transmission/session/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/manager/include",
    "$dsoftbus_root_path/core/transmission/pending_packet/include",

    "$dsoftbus_root_path/interfaces/kits",
    "$dsoftbus_root_path/interfaces/kits/bus_center",
    "$dsoftbus_root_path/interfaces/kits/common",
    "$dsoftbus_root_path/interfaces/kits/discovery",
    "$dsoftbus_root_path/interfaces/kits/transport",

    "$dsoftbus_root_path/third_party/dfinder/include",

    "//base/security/device_auth/interfaces/innerkits",
    "//commonlibrary/c_utils/base/include",
    "//third_party/cJSON",
    "unittest/common/",
  ]

  deps = [
    "$dsoftbus_root_path/core/common:softbus_utils",
    "$dsoftbus_root_path/core/frame:softbus_server",
    "//third_party/googletest:gtest_main",
  ]

  if (is_standard_system) {
    external_deps = [
      "c_utils:utils",
      "hiviewdfx_hilog_native:libhilog",
    ]
  } else {
    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
    ]
  }
}

import(
    "//foundation/communication/dsoftbus/core/transmission/trans_channel/common/common.gni")
import(
    "//foundation/communication/dsoftbus/core/transmission/trans_channel/proxy/proxy.gni")

ohos_unittest("TransProxyChannelCoreMockTest") {
  module_out_path = module_output_path
  sources = trans_comm_mock_src

  sources += trans_proxy_channel_src
  sources += trans_channel_common_src

  sources += [
    "trans_proxy_manager_test.cpp",
    "trans_proxy_message_test.cpp",
    "trans_proxy_network_test.cpp",
    "trans_proxy_session_test.cpp",
    "trans_proxy_transceiver_test.cpp",
  ]

  include_dirs = trans_comm_mock_inc
  include_dirs += [
    "$softbus_adapter_common/include",

    "$dsoftbus_root_path/core/adapter/bus_center/include",
    "$dsoftbus_root_path/core/authentication/interface",

    "$dsoftbus_root_path/core/bus_center/interface",
    "$dsoftbus_root_path/core/bus_center/lnn/net_ledger/common/include",
    "$dsoftbus_root_path/core/bus_center/lnn/lane_hub/lane_manager/include",

    "$dsoftbus_root_path/core/common/include",
    "$dsoftbus_root_path/core/common/message_handler/include",

    "$dsoftbus_root_path/core/connection/interface",
    "$dsoftbus_root_path/core/connection/p2p/interface",
    "$dsoftbus_root_path/core/connection/p2p/common/include",

    "$dsoftbus_root_path/core/discovery/interface",
    "$dsoftbus_root_path/core/discovery/manager/include",

    "$dsoftbus_root_path/core/transmission/common/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/common/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/proxy/include",
    "$dsoftbus_root_path/core/transmission/interface",
    "$dsoftbus_root_path/core/transmission/session/include",
    "$dsoftbus_root_path/core/transmission/trans_channel/manager/include",
    "$dsoftbus_root_path/core/transmission/pending_packet/include",

    "$dsoftbus_root_path/interfaces/kits",
    "$dsoftbus_root_path/interfaces/kits/bus_center",
    "$dsoftbus_root_path/interfaces/kits/common",
    "$dsoftbus_root_path/interfaces/kits/discovery",
    "$dsoftbus_root_path/interfaces/kits/transport",

    "//base/security/device_auth/interfaces/innerkits",
    "//commonlibrary/c_utils/base/include",
    "//third_party/cJSON",
    "unittest/common/",
  ]

  include_dirs +=
      [ "$dsoftbus_root_path/core/bus_center/lnn/net_buscenter/include" ]

  deps = [
    "$dsoftbus_root_path/core/common:softbus_utils",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  if (is_standard_system) {
    external_deps = [
      "c_utils:utils",
      "hiviewdfx_hilog_native:libhilog",
    ]
  } else {
    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
    ]
  }
}

group("unittest") {
  testonly = true
  deps = [
    ":TransProxyChannelCoreMockTest",
    ":TransProxyChannelCoreTest",
  ]
}
